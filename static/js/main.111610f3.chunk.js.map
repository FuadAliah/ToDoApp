{"version":3,"sources":["components/AddItem/AddItem.js","components/TodoItems/TodoItems.js","App.js","serviceWorker.js","index.js"],"names":["AddItem","state","task","type","taskMsg","typeMsg","handleChange","e","_this","setState","Object","defineProperty","target","id","value","handleSubmit","preventDefault","taskLength","length","typeLength","props","addItem","react_default","a","createElement","onSubmit","this","className","placeholder","onChange","Component","TodoItems","items","deleteItem","ListItems","map","item","key","onClick","App","msg","filter","push","components_TodoItems_TodoItems","components_AddItem_AddItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.111610f3.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './AddItem.css'\r\n\r\nclass AddItem extends Component {\r\n    state = {\r\n        task: '',\r\n        type: '',\r\n        taskMsg: '',\r\n        typeMsg: ''\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const taskLength = this.state.task.length;\r\n        const typeLength = this.state.type.length;\r\n        if (!taskLength) {\r\n            this.setState({\r\n                taskMsg: 'Enter valid Task Name'\r\n            })\r\n            return false\r\n        } else if (!typeLength) {\r\n            this.setState({\r\n                typeMsg: 'Enter Type Name'\r\n            })\r\n            return false\r\n        } else {\r\n            this.props.addItem(this.state)\r\n            this.setState({\r\n                task: '',\r\n                type: '',\r\n                taskMsg: '',\r\n                typeMsg: ''\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input className=\"task\" type=\"text\" placeholder=\"Enter Task Name..\" id=\"task\" onChange={this.handleChange} value={this.state.task} />\r\n                    <input className=\"type\" type=\"text\" placeholder=\"Enter Task Type\" id=\"type\" onChange={this.handleChange} value={this.state.type} />\r\n                    <input className=\"btn\" type=\"submit\" value=\"Add\" />\r\n                </form>\r\n                <span className=\"warning task\">{this.state.taskMsg}</span>\r\n                <span className=\"warning type\">{this.state.typeMsg}</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddItem;","import React from 'react'\r\nimport './TodoItems.css'\r\nconst TodoItems = (props) => {\r\n    const { items, deleteItem } = props;\r\n    let length = items.length;\r\n    const ListItems = length ? (\r\n        items.map(item => {\r\n            return (\r\n                <div className=\"items\" key={item.id}>\r\n                    <span className=\"taskNum\">{item.id}</span>\r\n                    <span className=\"taskName\">{item.task}</span>\r\n                    <span className=\"taskType\">{item.type}</span>\r\n                    <span className=\"delIcon\" onClick={() => deleteItem(item.id)}>&times;</span>\r\n                </div>\r\n            )\r\n        })\r\n    ) : (\r\n            <span className=\"noItem\">No Items</span>\r\n        )\r\n    return (\r\n        <div>\r\n            <div className=\"titles\">\r\n                <span className=\"title num\">ID</span>\r\n                <span className=\"title firstSection\">Task Name</span>\r\n                <span className=\"title secSection\">Type</span>\r\n                <span className=\"title thirSection\">Action</span>\r\n            </div>\r\n            <div className=\"content\">\r\n                {ListItems}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoItems","import React, { Component } from 'react'\nimport AddItem from './components/AddItem/AddItem'\nimport TodoItems from './components/TodoItems/TodoItems'\n\nclass App extends Component {\n  state = {\n    msg: \"state\",\n    items: [\n      { id: 1, task: 'Home Page Design', type: 'Design' },\n      { id: 2, task: 'Design Slicing', type: 'front-end' },\n      { id: 3, task: 'Requiremnet', type: 'BA' },\n      { id: 4, task: 'Home Page Design', type: 'Design' },\n      { id: 5, task: 'Design Slicing', type: 'front-end' },\n\n    ]\n  }\n\n  deleteItem = (id) => {\n    let items = this.state.items.filter(item => {\n      return item.id !== id;\n    })\n    this.setState({ items })\n  }\n\n  addItem = (item) => {\n    item.id = this.state.items.length + 1\n    let items = this.state.items;\n    items.push(item)\n    this.setState({ items })\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"container\">\n          <TodoItems items={this.state.items} deleteItem={this.deleteItem} />\n          <AddItem addItem={this.addItem} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}